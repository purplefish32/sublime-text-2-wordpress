<snippet>
	<content><![CDATA[${1:<?php
}${18:/**
 * Template for create new Widget
 *
 * use Action Hook 'widgets_init' for register.
 * @see http://codex.wordpress.org/Widgets_API#Developing_Widgets
 *
 * This below '@param' is used in WP_Widget::__construct().
 *
 * @param string $id_base         Optional Base ID for the widget, lowercase and unique. If left empty,
 *                                a portion of the widget's class name will be used Has to be unique.
 * @param string $name            Name for the widget displayed on the configuration page.
 * @param array  $widget_options  Optional. Widget options. See {@see wp_register_sidebar_widget()} for
 *                                information on accepted arguments. Default empty array.
 * @param array  $control_options Optional. Widget control options. See {@see wp_register_widget_control()}
 *                                for information on accepted arguments. Default empty array.
 */
}class ${2:Class_Name}_Widget extends WP_Widget \{

	/**
	 * Register widget with WordPress.
	 */
	public function __construct() \{

		\$widget_options = array(${3:
			'description' => ${4:__( '${5:Widget Description}'${6:, ${7:'${8:text_domain}'}} )}
		});

		\$control_options = array(${9:});

		parent::__construct(
			${10:'${11:id_base}_widget'},
			${12:'${13:name}'},
			${14:\$widget_options,
			}${15:\$control_options
		});
	\}

	/**
	 * Front-end display of widget
	 *
	 * @see WP_Widget::widget()
	 *
	 * @param array \$args     Widget arguments.
	 * @param array \$instance Saved values from database.
	 */
	public function widget( \$args, \$instance ) \{
		echo \$args['before_widget'];
		if ( ! empty( \$instance['title'] ) ) \{
			echo \$args['before_title'] . apply_filters( 'widget_title', \$instance['title'] ) . \$args['after_title'];
		\}

		${0:// Your Code}

		echo \$args['after_widget'];
	\}

	/**
	 * Back-end widget form.
	 *
	 * @see WP_Widget::form()
	 *
	 * @param array \$instance Previously saved values from database.
	 */
	public function form( \$instance ) \{
		// Your Code
	\}

	/**
	 * Sanitize widget form values as they are saved.
	 *
	 * @see WP_Widget::update()
	 *
	 * @param array \$new_instance Values just sent to be saved.
	 * @param array \$old_instance Previously saved values from database.
	 *
	 * @return array Updated safe values to be saved.
	 */
	public function update( \$new_instance, \$old_instance ) \{
		\$update = array();

		// Your Code

		return ! empty( \$update ) ? \$update : \$old_instance;
	\}
\}${16:
function ${17:function_name}_register_widget() \{
	register_widget( '$2_Widget');
\}
add_action( 'widgets_init', '$17_register_widget' );
}
]]></content>
    <description>WP Template: Register New Widget</description>
	<tabTrigger>wp-widget</tabTrigger>
	<scope>embedding.php</scope>
</snippet>